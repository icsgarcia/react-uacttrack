// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                @id @default(autoincrement())
  firstName        String
  lastName         String
  role             String             @default("USER")
  email            String             @unique
  password         String
  refreshToken     RefreshToken[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ActivityProposal ActivityProposal[]
  Organization     Organization       @relation(fields: [organizationId], references: [id])
  organizationId   Int
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

model ActivityProposal {
  id               Int          @id @default(autoincrement())
  cashForm         String?
  foodForm         String?
  supplyForm       String?
  reproductionForm String?
  otherForm        String?
  attendees        Int
  date             DateTime
  startTime        DateTime
  endTime          DateTime
  venue            String
  title            String
  participants     String
  purpose          String
  requirements     String
  adminApproval    String       @default("PENDING")
  deanApproval     String       @default("PENDING")
  vpaApproval      String       @default("PENDING")
  vpaaApproval     String       @default("PENDING")
  status           String       @default("PENDING")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  user             User         @relation(fields: [userId], references: [id])
  userId           Int
  Organization     Organization @relation(fields: [organizationId], references: [id])
  organizationId   Int

  @@index([userId])
  @@index([organizationId])
}

model Organization {
  id               Int                @id @default(autoincrement())
  name             String
  logo             String?
  adminName        String
  User             User[]
  ActivityProposal ActivityProposal[]
}
